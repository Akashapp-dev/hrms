     1: const $ = (sel) => document.querySelector(sel);
     2: const app = $('#app');
     3: // Responsive breakpoint watcher (avoids heavy resize handling)
     4: const desktopMQ = window.matchMedia('(min-width: 900px)');
     5: function applyResponsiveNav(){
     6:   if(!state.user) return;
     7:   const drawer = document.getElementById('drawer');
     8:   if(!drawer) return;
     9:   if(desktopMQ.matches){
    10:     // Desktop: drawer docked
    11:     drawer.classList.remove('hidden');
    12:   } else {
    13:     // Mobile: drawer hidden until burger opens it
    14:     drawer.classList.add('hidden');
    15:     document.body.classList.remove('nav-open');
    16:   }
    17: }
    18: if (desktopMQ.addEventListener) desktopMQ.addEventListener('change', applyResponsiveNav);
    19: else if (desktopMQ.addListener) desktopMQ.addListener(applyResponsiveNav);
    20: // API base for split hosting (GitHub Pages + hosted API)
    21: const API_BASE = (window.API_BASE || (document.querySelector('meta[name="api-base"]')?.content || '')).replace(/\/$/, '');
    22: const TOKEN_KEY = 'hrms_token';
    23: function getToken(){ try{ return localStorage.getItem(TOKEN_KEY) || ''; }catch{ return ''; } }
    24: function setToken(v){ try{ if(v) localStorage.setItem(TOKEN_KEY, v); else localStorage.removeItem(TOKEN_KEY); }catch{} }
    25: function authHeaders(extra={}){ const t=getToken(); return { ...(extra||{}), ...(t ? { Authorization: 'Bearer '+t } : {}) }; }
    26: 
    27: // -------- API --------
    28: const api = {
    29:   async me() { const r = await fetch(API_BASE + '/api/me', { credentials: API_BASE ? 'include' : 'same-origin', headers: authHeaders() }); return r.json(); },
    30:   async login(username, password){
    31:     const r = await fetch(API_BASE + '/api/auth/login',{method:'POST',headers:authHeaders({'Content-Type':'application/json'}),credentials: API_BASE ? 'include' : 'same-origin',body:JSON.stringify({username,password})});
    32:     if(!r.ok) throw new Error((await r.json()).error||'Login failed');
    33:     const data = await r.json();
    34:     setToken(data.token);
    35:     return data;
    36:   },
    37:   async logout(){ await fetch(API_BASE + '/api/auth/logout',{method:'POST',headers:authHeaders(),credentials: API_BASE ? 'include' : 'same-origin'}); setToken(''); },
    38:   async listTemplates(){ const r=await fetch(API_BASE + '/api/templates',{headers:authHeaders(),credentials: API_BASE ? 'include' : 'same-origin'}); return (await r.json()).items; },
    39:   async createTemplate(t){ const r=await fetch(API_BASE + '/api/templates',{method:'POST',headers:authHeaders({'Content-Type':'application/json'}),credentials: API_BASE ? 'include' : 'same-origin',body:JSON.stringify(t)}); if(!r.ok) throw new Error('Create failed'); return (await r.json()).item; },
    40:   async updateTemplate(id,t){ const r=await fetch(API_BASE + `/api/templates/${id}`,{method:'PUT',headers:authHeaders({'Content-Type':'application/json'}),credentials: API_BASE ? 'include' : 'same-origin',body:JSON.stringify(t)}); if(!r.ok) throw new Error('Update failed'); return (await r.json()).item; },
    41:   async deleteTemplate(id){ const r=await fetch(API_BASE + `/api/templates/${id}`,{method:'DELETE',headers:authHeaders(),credentials: API_BASE ? 'include' : 'same-origin'}); if(!r.ok) throw new Error('Delete failed'); },
    42:   async listDocs(){ const r=await fetch(API_BASE + '/api/documents',{headers:authHeaders(),credentials: API_BASE ? 'include' : 'same-origin'}); return (await r.json()).items; },
    43:   async render(body){ const r=await fetch(API_BASE + '/api/documents',{method:'POST',headers:authHeaders({'Content-Type':'application/json'}),credentials: API_BASE ? 'include' : 'same-origin',body:JSON.stringify(body)}); if(!r.ok) throw new Error('Render failed'); return (await r.json()).item; },
    44:   // Admin
    45:   async listUsers(){ const r = await fetch(API_BASE + '/api/auth/users',{headers:authHeaders(),credentials: API_BASE ? 'include' : 'same-origin'}); if(!r.ok) throw new Error((await r.json()).error||'List users failed'); return (await r.json()).users; },
    46:   async createUser(body){ const r = await fetch(API_BASE + '/api/auth/users',{method:'POST',headers:authHeaders({'Content-Type':'application/json'}),credentials: API_BASE ? 'include' : 'same-origin',body:JSON.stringify(body)}); if(!r.ok) throw new Error((await r.json()).error||'Create user failed'); return (await r.json()).user; },
    47:   async updateUser(id, body){ const r = await fetch(API_BASE + `/api/auth/users/${id}`,{method:'PUT',headers:authHeaders({'Content-Type':'application/json'}),credentials: API_BASE ? 'include' : 'same-origin',body:JSON.stringify(body)}); if(!r.ok) throw new Error((await r.json()).error||'Update user failed'); return (await r.json()).user; },
    48:   async deleteUser(id){ const r = await fetch(API_BASE + `/api/auth/users/${id}`,{method:'DELETE',headers:authHeaders(),credentials: API_BASE ? 'include' : 'same-origin'}); if(!r.ok) throw new Error('Delete user failed'); }
    49: };
    50: // (reserved) PDF helper can be added here if needed
    51: 
    52: // -------- State --------
    53: let state = {
    54:   user: null,
    55:   authReady: false,
    56:   templates: [],
    57:   currentId: null,
    58:   data: {},
    59:   varsOrder: [],
    60:   varsPage: 0,
    61:   followPreview: true,
    62:   _followTimer: null,
    63:   alwaysFollowUntilSave: true,
    64:   docs: [],
    65:   docsQuery: '',
    66:   users: [],
    67:   selectedUserId: null,
    68:   creatingUser: false
    69: };
    70: 
    71: function setUser(user){
    72:   state.user = user;
    73:   $('#user-info').textContent = user ? `${user.username} (${user.role})` : '';
    74:   $('#logout-btn').classList.toggle('hidden', !user);
    75:   $('#burger').classList.toggle('hidden', !user);
    76:   document.body.classList.toggle('authed', !!user);
    77:   document.body.classList.toggle('guest', !user);
    78:   document.querySelectorAll('.admin-only').forEach(el=>{
    79:     el.classList.toggle('hidden', !(user && user.role==='admin'));
    80:   });
    81:   // Hide Compose for viewers (Templates remain visible read-only)
    82:   const navCmp = document.querySelector('nav a[href="#/compose"]');
    83:   const isViewer = !!user && user.role === 'viewer';
    84:   if(navCmp) navCmp.classList.toggle('hidden', isViewer);
    85:   const drawer = document.getElementById('drawer');
    86:   if(!user){
    87:     drawer.classList.add('hidden');
    88:     document.body.classList.remove('nav-open');
    89:   } else {
    90:     // Let media query decide; ensure initial state applied once
    91:     applyResponsiveNav();
    92:   }
    93: }
    94: 
    95: /* ---------- Overlay login helpers + bindings ---------- */
    96: function showLoginOverlay(){ const o = document.getElementById('login'); if(o) o.style.display = 'grid'; }
    97: function hideLoginOverlay(){ const o = document.getElementById('login'); if(o) o.style.display = 'none'; }
    98: function bindOverlayLogin(){
    99:   const form = document.getElementById('overlay-login-form');
   100:   if(!form) return;
   101: 
   102:   form.addEventListener('submit', async (e)=>{
   103:     e.preventDefault();
   104:     const username = document.getElementById('ov-username').value.trim();
   105:     const password = document.getElementById('ov-password').value;
   106:     if(!username || !password) return;
   107: 
   108:     try{
   109:       const res = await api.login(username, password);
   110:       setUser(res.user);
   111:       await bootstrapData();
   112:       // hide overlay and go home
   113:       hideLoginOverlay();
   114:       navigate('#/home');
   115:     }catch(err){
   116:       alert(err.message || 'Login failed');
   117:     }
   118:   });
   119: }
   120: 
   121: // -------- Router --------
   122: const routes = [];
   123: function addRoute(path, render, options={}){ routes.push({ path, render, auth: !!options.auth, roles: options.roles||null, title: options.title||'' }); }
   124: function navigate(path){ location.hash = path; }
   125: function redirectTo(path){ navigate(path); }
   126: window.redirectTo = redirectTo;
   127: 
   128: window.addEventListener('hashchange', handleRoute);
   129: 
   130: async function handleRoute(){
   131:   const path = location.hash || '#/login';
   132:   const route = routes.find(r => r.path === path) || routes.find(r => r.path === '#/not-found');
   133:   // If auth status not determined yet, avoid guarding
   134:   if(route?.auth && !state.authReady){
   135:     return; // wait for init() to complete auth check
   136:   }
   137:   // auth + role guards (only after authReady)
   138:   if(route?.auth && !state.user){
   139:     // Do not change the hash; just show login overlay
   140:     showLoginOverlay();
   141:     return; // leave current view empty/unchanged until login
   142:   }
   143:   if(route?.roles && state.user && !route.roles.includes(state.user.role)){
   144:     return redirectTo('#/home');
   145:   }
   146:   app.innerHTML = '';
   147:   await route.render();
   148: }
   149: 
   150: // -------- Views --------
   151: function viewLogin(){
   152:   // Overlay login is used; keep route but render nothing to avoid duplicate forms.
   153:   app.innerHTML = '';
   154: }
   155: 
   156: function extractVars(tpl){
   157:   const set = new Set(); const re = /{{\s*([a-zA-Z0-9_.]+)\s*}}/g; let m; while((m=re.exec(tpl))) set.add(m[1]); return [...set];
   158: }
   159: function simpleRender(tpl, data){ return tpl.replace(/{{\s*([a-zA-Z0-9_.]+)\s*}}/g,(_,k)=> data[k] ?? ''); }
   160: // Render preview with invisible anchors after each placeholder for auto-scroll
   161: function renderPreviewWithAnchors(tpl, data){
   162:   return tpl.replace(/{{\s*([a-zA-Z0-9_.]+)\s*}}/g, (_, k)=>{
   163:     const val = data[k] ?? '';
   164:     // Add an invisible anchor after the inserted value to locate it in preview
   165:     return String(val) + `<span class=\"ph-anchor\" data-ph=\"${k}\"></span>`;
   166:   });
   167: }
   168: 
   169: function scrollPreviewToVar(key, opts={}){
   170:   const scroller = document.querySelector('.preview-scroll');
   171:   const target = document.querySelector(`#preview .ph-anchor[data-ph="${key}"]`);
   172:   if(!scroller || !target) return;
   173:   const isLast = Array.isArray(state.varsOrder) && state.varsOrder[state.varsOrder.length-1] === key;
   174:   const block = opts.block || (isLast ? 'end' : 'center');
   175:   // If last placeholder, ensure we reach the very bottom of the preview
   176:   if(isLast){
   177:     try{ scroller.scrollTo({ top: scroller.scrollHeight, behavior: opts.behavior || 'auto' }); }
   178:     catch{ scroller.scrollTop = scroller.scrollHeight; }
   179:     return;
   180:   }
   181:   try{ target.scrollIntoView({ block, inline:'nearest', behavior: opts.behavior || 'auto' }); }
   182:   catch{
   183:     const tRect = target.getBoundingClientRect();
   184:     const sRect = scroller.getBoundingClientRect();
   185:     const delta = tRect.top - sRect.top - (block==='end' ? (sRect.height*0.85) : (sRect.height/2));
   186:     scroller.scrollTop += delta;
   187:   }
   188: }
   189: 
   190: function isAnchorVisible(key){
   191:   const scroller = document.querySelector('.preview-scroll');
   192:   const target = document.querySelector(`#preview .ph-anchor[data-ph="${key}"]`);
   193:   if(!scroller || !target) return false;
   194:   const sr = scroller.getBoundingClientRect();
   195:   const tr = target.getBoundingClientRect();
   196:   const m = 24; // margin
   197:   return tr.top >= sr.top + m && tr.bottom <= sr.bottom - m;
   198: }
   199: 
   200: function initPreviewFollow(){
   201:   const scroller = document.querySelector('.preview-scroll');
   202:   if(!scroller) return;
   203:   const onUserScroll = ()=>{
   204:     if(state.alwaysFollowUntilSave) return; // keep following until Render & Save
   205:     state.followPreview = false;
   206:     if(state._followTimer) clearTimeout(state._followTimer);
   207:     state._followTimer = setTimeout(()=>{ state.followPreview = true; }, 900);
   208:   };
   209:   scroller.addEventListener('wheel', onUserScroll, { passive:true });
   210:   scroller.addEventListener('touchstart', onUserScroll, { passive:true });
   211:   scroller.addEventListener('scroll', onUserScroll, { passive:true });
   212: }
   213: 
   214: async function viewTemplates(){
   215:   // Templates management only
   216:   const tpl = `
   217:   <div class="templates-grid">
   218:     <section class="list-panel">
   219:       <div class="row" style="justify-content:space-between;align-items:center">
   220:         <h2 style="margin:0">Templates</h2>
   221:         <div class="row" style="gap:6px">
   222:           <button id="new-template-btn">New</button>
   223:           <input id="upload-input" type="file" accept=".html,.htm,.docx" style="display:none" />
   224:           <button id="upload-btn" class="secondary">Upload</button>
   225:         </div>
   226:       </div>
   227:       <select id="template-list" size="10"></select>
   228:       <div class="row" style="gap:8px;margin-top:10px">
   229:         <button id="save-template-btn" disabled>Save</button>
   230:         <button id="delete-template-btn" disabled class="danger">Delete</button>
   231:       </div>
   232:     </section>
   233:     <section class="editor-panel">
   234:       <div class="row" style="justify-content:space-between;align-items:center">
   235:         <h2 style="margin:0">Editor</h2>
   236:         <button class="secondary" id="go-compose">Go to Compose →</button>
   237:       </div>
   238:       <div class="field-grid">
   239:         <div>
   240:           <label>Name</label>
   241:           <input id="template-name" placeholder="Template name" />
   242:         </div>
   243:         <div>
   244:           <label>Description</label>
   245:           <input id="template-desc" placeholder="Optional" />
   246:         </div>
   247:       </div>
   248:       <label>Content (use {{placeholders}})</label>
   249:       <textarea id="template-content" rows="18" placeholder="Dear {{employee}},\nWelcome to {{company}}."></textarea>
   250:       <p class="help">Tip: Use placeholders like {{name}}, {{date}}. Then open Compose to fill data and preview.</p>
   251:     </section>
   252:   </div>`;
   253:   app.innerHTML = tpl;
   254:   renderTemplates();
   255:   // events
   256:   $('#new-template-btn').addEventListener('click', ()=>{ state.currentId=null; $('#template-name').value=''; $('#template-desc').value=''; $('#template-content').value=''; updateVars(); $('#save-template-btn').disabled=false; });
   257:   $('#save-template-btn').addEventListener('click', saveTemplate);
   258:   $('#delete-template-btn').addEventListener('click', deleteTemplate);
   259:   $('#upload-btn').addEventListener('click', ()=> document.getElementById('upload-input').click());
   260:   document.getElementById('upload-input').addEventListener('change', onUploadTemplate);
   261:   $('#template-list').addEventListener('change', (e)=>{ state.currentId=e.target.value; state.varsPage = 0; renderTemplates(); });
   262:   $('#template-content').addEventListener('input', updateVars);
   263:   $('#go-compose').addEventListener('click', ()=> navigate('#/compose'));
   264: 
   265:   // Role-based UI: viewers can only view
   266:   if (state.user?.role === 'viewer') {
   267:     ['new-template-btn','upload-btn','save-template-btn','delete-template-btn'].forEach(id=>{
   268:       const el = document.getElementById(id); if (el) el.disabled = true;
   269:     });
   270:     ['template-name','template-desc','template-content'].forEach(id=>{
   271:       const el = document.getElementById(id); if (el) el.setAttribute('readonly','true');
   272:     });
   273:     const goCompose = document.getElementById('go-compose');
   274:     if(goCompose) goCompose.classList.add('hidden');
   275:   }
   276: }
   277: 
   278: // Compose view: select template, enter data, live preview + download
   279: async function viewCompose(){
   280:   const tpl = `
   281:   <section>
   282:     <div class="row" style="justify-content:space-between;align-items:center">
   283:       <h2 style="margin:0">Compose</h2>
   284:       <div class="row" style="gap:8px">
   285:         <label style="margin:0">Template</label>
   286:         <select id="compose-template"></select>
   287:       </div>
   288:     </div>
   289:     <div class="editor-preview" style="margin-top:8px">
   290:       <div class="placeholders-panel">
   291:         <h3 class="subhead" style="margin:0 0 6px">Placeholders</h3>
   292:         <p class="hint" style="color:var(--muted);margin:0 0 8px">Fields appear based on placeholders in the selected template.</p>
   293:         <div id="vars"></div>
   294:         <h3 class="subhead">Common Fields</h3>
   295:         <div id="custom-fields"></div>
   296:         <div class="row">
   297:           <button id="render-btn" disabled>Render & Save</button>
   298:         </div>
   299:       </div>
   300:       <div class="preview-panel">
   301:         <div class="preview-toolbar">
   302:           <h3 class="subhead" style="margin:0">Live Preview</h3>
   303:           <div class="row" style="gap:6px">
   304:             <div class="zoom-controls">
   305:               <button id="zoom-out" class="secondary" title="Zoom out">-</button>
   306:               <button id="zoom-in" class="secondary" title="Zoom in">+</button>
   307:             </div>
   308:             <button id="download-btn" class="secondary">Download PDF</button>
   309:           </div>
   310:         </div>
   311:         <div class="preview-scroll" style="margin-top:6px">
   312:           <div id="preview" class="preview a4-page"></div>
   313:         </div>
   314:       </div>
   315:     </div>
   316:   </section>`;
   317:   app.innerHTML = tpl;
   318:   // Ensure preview always follows until user explicitly renders & saves
   319:   state.alwaysFollowUntilSave = true;
   320:   state.followPreview = true;
   321:   state.varsPage = 0;
   322:   // populate templates select
   323:   const sel = document.getElementById('compose-template');
   324:   sel.innerHTML = '';
   325:   state.templates.forEach(t=>{ const opt=document.createElement('option'); opt.value=t.id; opt.textContent=t.name; if(t.id===state.currentId) opt.selected=true; sel.appendChild(opt); });
   326:   if(!state.currentId && state.templates[0]) state.currentId = state.templates[0].id;
   327:   renderCustomFields();
   328:   updateVars();
   329:   livePreview();
   330:   sel.addEventListener('change', (e)=>{ state.currentId = e.target.value; state.varsPage = 0; updateVars(); livePreview(); });
   331:   const dl = document.getElementById('download-btn'); if(dl) dl.addEventListener('click', downloadPdf);
   332:   const rb = document.getElementById('render-btn'); if(rb) rb.addEventListener('click', renderDocument);
   333:   const zin = document.getElementById('zoom-in');
   334:   const zout = document.getElementById('zoom-out');
   335:   const clamp = (v,min,max)=> Math.max(min, Math.min(max, v));
   336:   const getZoom = ()=> parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--preview-zoom')||'1') || 1;
   337:   if(zin) zin.addEventListener('click', ()=>{
   338:     const z = clamp(getZoom() + 0.05, 0.7, 1.5);
   339:     document.documentElement.style.setProperty('--preview-zoom', z);
   340:   });
   341:   if(zout) zout.addEventListener('click', ()=>{
   342:     const z = clamp(getZoom() - 0.05, 0.7, 1.5);
   343:     document.documentElement.style.setProperty('--preview-zoom', z);
   344:   });
   345:   // Bind preview follow controls to detect manual scrolls
   346:   initPreviewFollow();
   347: }
   348: 
   349: function renderTemplates(){
   350:   const list = $('#template-list'); if(!list) return;
   351:   list.innerHTML='';
   352:   state.templates.forEach(t=>{ const opt=document.createElement('option'); opt.value=t.id; opt.textContent=t.name; if(t.id===state.currentId) opt.selected=true; list.appendChild(opt); });
   353:   const t = state.templates.find(x=>x.id===state.currentId);
   354:   $('#template-name').value = t?.name || '';
   355:   $('#template-desc').value = t?.description || '';
   356:   $('#template-content').value = t?.content || '';
   357:   $('#save-template-btn').disabled = !t;
   358:   $('#delete-template-btn').disabled = !t;
   359:   updateVars();
   360: }
   361: function getActiveContent(){
   362:   const editor = document.getElementById('template-content');
   363:   if(editor) return editor.value || '';
   364:   const sel = document.getElementById('compose-template');
   365:   if(sel){ const t = state.templates.find(x=>x.id===sel.value); return t?.content || ''; }
   366:   return '';
   367: }
   368: function updateVars(){
   369:   const content = getActiveContent();
   370:   // Keep placeholders in the order they appear in the template
   371:   const vars = extractVars(content).slice();
   372:   state.varsOrder = vars.slice();
   373:   const panel = $('#vars'); if(!panel) return; panel.innerHTML='';
   374: 
   375:   const formatPlaceholderLabel = (key)=>{
   376:     const s = String(key || '')
   377:       .replace(/[._-]+/g, ' ')
   378:       .replace(/\s+/g, ' ')
   379:       .trim();
   380:     if(!s) return key;
   381:     return s.charAt(0).toUpperCase() + s.slice(1);
   382:   };
   383: 
   384:   const autoResize = (ta)=>{
   385:     if(!ta) return;
   386:     ta.style.height = 'auto';
   387:     ta.style.height = Math.min(400, Math.max(38, ta.scrollHeight)) + 'px';
   388:   };
   389: 
   390:   const PAGE_SIZE = 7;
   391:   const total = vars.length;
   392:   const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE));
   393:   // Clamp current page into range
   394:   if (!Number.isInteger(state.varsPage)) state.varsPage = 0;
   395:   state.varsPage = Math.max(0, Math.min(state.varsPage, totalPages - 1));
   396:   const start = state.varsPage * PAGE_SIZE;
   397:   const end = start + PAGE_SIZE;
   398:   const pageVars = vars.slice(start, end);
   399: 
   400:   pageVars.forEach(v=>{
   401:     const row = document.createElement('div');
   402:     row.className = 'row placeholder-row';
   403:     const label = document.createElement('label');
   404:     label.textContent = formatPlaceholderLabel(v);
   405:     const input = document.createElement('textarea');
   406:     input.rows = 2;
   407:     input.placeholder = 'Enter ' + formatPlaceholderLabel(v);
   408:     input.value = state.data[v] || '';
   409:     autoResize(input);
   410:     if(state.user?.role === 'viewer'){
   411:       input.setAttribute('readonly','true');
   412:       input.disabled = true;
   413:     } else {
   414:       const isLast = vars[vars.length-1] === v;
   415:       input.addEventListener('input', (e)=>{ state.data[v] = e.target.value; autoResize(e.target); livePreview(v, { force: isLast }); });
   416:       input.addEventListener('focus', ()=>{ scrollPreviewToVar(v, { behavior:'smooth' }); });
   417:     }
   418:     row.appendChild(label);
   419:     row.appendChild(input);
   420:     panel.appendChild(row);
   421:   });
   422: 
   423:   // Pagination controls if there are more than PAGE_SIZE placeholders
   424:   if (total > PAGE_SIZE) {
   425:     const nav = document.createElement('div');
   426:     nav.className = 'row';
   427:     nav.style.justifyContent = 'space-between';
   428:     nav.style.alignItems = 'center';
   429:     nav.style.marginTop = '6px';
   430: 
   431:     const info = document.createElement('div');
   432:     info.className = 'hint';
   433:     info.textContent = `Placeholders ${start + 1}-${Math.min(end, total)} of ${total}`;
   434: 
   435:     const btns = document.createElement('div');
   436:     btns.className = 'row';
   437:     btns.style.gap = '6px';
   438: 
   439:     const prev = document.createElement('button');
   440:     prev.textContent = 'Prev';
   441:     prev.className = 'secondary';
   442:     prev.disabled = state.varsPage <= 0;
   443:     prev.addEventListener('click', ()=>{
   444:       const newPage = Math.max(0, state.varsPage - 1);
   445:       const firstKey = vars[newPage * PAGE_SIZE];
   446:       state.varsPage = newPage;
   447:       updateVars();
   448:       panel.scrollTop = 0;
   449:       if (firstKey) setTimeout(()=> scrollPreviewToVar(firstKey, { behavior:'smooth' }), 0);
   450:     });
   451: 
   452:     const next = document.createElement('button');
   453:     next.textContent = 'Next';
   454:     next.className = 'secondary';
   455:     next.disabled = state.varsPage >= (totalPages - 1);
   456:     next.addEventListener('click', ()=>{
   457:       const newPage = Math.min(totalPages - 1, state.varsPage + 1);
   458:       const firstKey = vars[newPage * PAGE_SIZE];
   459:       state.varsPage = newPage;
   460:       updateVars();
   461:       panel.scrollTop = 0;
   462:       if (firstKey) setTimeout(()=> scrollPreviewToVar(firstKey, { behavior:'smooth' }), 0);
   463:     });
   464: 
   465:     btns.appendChild(prev);
   466:     btns.appendChild(next);
   467:     nav.appendChild(info);
   468:     nav.appendChild(btns);
   469:     panel.appendChild(nav);
   470:   }
   471:   const btn = $('#render-btn'); if(btn) btn.disabled = !state.user || state.user.role==='viewer' || !content;
   472:   const dBtn = document.getElementById('download-btn'); if(dBtn) dBtn.disabled = !content;
   473:   livePreview();
   474: }
   475: function livePreview(activeKey, opts={}){
   476:   const content = getActiveContent();
   477:   const prev = $('#preview');
   478:   if(prev){
   479:     prev.innerHTML = renderPreviewWithAnchors(content, state.data);
   480:     if(activeKey){
   481:       const shouldScroll = (opts.force === true) || (state.followPreview && !isAnchorVisible(activeKey));
   482:       if(shouldScroll){ setTimeout(()=> scrollPreviewToVar(activeKey, { behavior:'smooth', ...opts }), 0); }
   483:     }
   484:   }
   485: }
   486: function renderCustomFields(){
   487:   const container = document.getElementById('custom-fields'); if(!container) return;
   488:   const fields = [
   489:     { key:'name', label:'Name' },
   490:     { key:'address', label:'Address', multiline: true },
   491:     { key:'ctc', label:'CTC' },
   492:     { key:'annual_salary', label:'Annual Salary' }
   493:   ];
   494:   container.innerHTML = '';
   495:   fields.forEach(f=>{
   496:     const row = document.createElement('div');
   497:     row.className = 'row';
   498:     const label = document.createElement('label');
   499:     label.textContent = f.label;
   500:     const control = f.multiline ? document.createElement('textarea') : document.createElement('input');
   501:     if(f.multiline){ control.rows = 2; }
   502:     control.placeholder = f.label;
   503:     control.value = state.data[f.key] || '';
   504:     if(state.user?.role === 'viewer'){
   505:       control.setAttribute('readonly','true');
   506:       control.disabled = true;
   507:     } else {
   508:       const isLastCommon = Array.isArray(state.varsOrder) && state.varsOrder[state.varsOrder.length-1] === f.key;
   509:       control.addEventListener('input', (e)=>{ state.data[f.key] = e.target.value; livePreview(f.key, { force: isLastCommon }); });
   510:       control.addEventListener('focus', ()=>{ scrollPreviewToVar(f.key, { behavior:'smooth' }); });
   511:     }
   512:     row.appendChild(label);
   513:     row.appendChild(control);
   514:     container.appendChild(row);
   515:   });
   516: }
   517: async function saveTemplate(){
   518:   const t = { name: $('#template-name').value, description: $('#template-desc').value, content: $('#template-content').value };
   519:   if(!t.name || !t.content) return alert('Name and content required');
   520:   if(state.currentId){ const updated = await api.updateTemplate(state.currentId,t); const idx=state.templates.findIndex(x=>x.id===state.currentId); state.templates[idx]=updated; }
   521:   else { const created = await api.createTemplate(t); state.templates.push(created); state.currentId=created.id; }
   522:   renderTemplates();
   523: }
   524: async function deleteTemplate(){ if(!state.currentId) return; if(!confirm('Delete template?')) return; await api.deleteTemplate(state.currentId); state.templates=state.templates.filter(x=>x.id!==state.currentId); state.currentId=null; renderTemplates(); }
   525: async function renderDocument(){
   526:   const t = getActiveContent();
   527:   if(!t) return alert('No template content');
   528:   try{
   529:     const doc = await api.render({ content:t, data:state.data });
   530:     state.docs.push(doc);
   531:     // Stop forced follow after saving, so user can freely inspect
   532:     state.alwaysFollowUntilSave = false;
   533:     alert('Document saved. See Letters page to download.');
   534:   }catch(e){
   535:     alert('Render failed');
   536:   }
   537: }
   538: 
   539: async function downloadPdf(){
   540:   const content = getActiveContent();
   541:   if(!content) return alert('Add some content first');
   542:   const t = state.templates.find(x=>x.id===state.currentId);
   543:   const date = new Date().toISOString().slice(0,10);
   544:   const suggested = `${(t?.name||'document')}-${date}`;
   545:   let name = prompt('Enter PDF file name', suggested);
   546:   if(name==null) return; // cancelled
   547:   name = name.trim() || suggested;
   548:   if(!name.toLowerCase().endsWith('.pdf')) name += '.pdf';
   549:   try{
   550:     const r = await fetch(API_BASE + '/api/documents/pdf', {
   551:       method:'POST',
   552:       headers:{ 'Content-Type':'application/json' },
   553:       credentials: API_BASE ? 'include' : 'same-origin',
   554:       body: JSON.stringify({ content, data: state.data, templateId: state.currentId || null, fileName: name })
   555:     });
   556:     if(!r.ok){ try{ const j=await r.json(); alert(j.error||'Failed to generate PDF'); }catch{ alert('Failed to generate PDF'); } return; }
   557:     const blob = await r.blob();
   558:     const url = URL.createObjectURL(blob);
   559:     const a = document.createElement('a'); a.href = url; a.download = name; document.body.appendChild(a); a.click(); a.remove();
   560:     URL.revokeObjectURL(url);
   561:     // refresh docs list so Letters shows the saved PDF name
   562:     try { state.docs = await api.listDocs(); } catch {}
   563:   }catch(e){ alert(e.message); }
   564: }
   565: 
   566: async function onUploadTemplate(e){
   567:   const f = e.target.files && e.target.files[0]; if(!f) return;
   568:   const fd = new FormData(); fd.append('file', f);
   569:   const r = await fetch(API_BASE + '/api/templates/import',{ method:'POST', body: fd, credentials: API_BASE ? 'include' : 'same-origin' });
   570:   if(!r.ok){ alert('Import failed'); return; }
   571:   const { name, content, vars, defaults } = await r.json();
   572:   document.getElementById('template-name').value = name || 'Imported Template';
   573:   document.getElementById('template-content').value = content || '';
   574:   // seed defaults into state.data
   575:   state.data = { ...defaults };
   576:   updateVars();
   577: }
   578: 
   579: async function viewDocuments(){
   580:   app.innerHTML = `
   581:     <section class="center container">
   582:       <h2>Previous Letters</h2>
   583:       <div class="row" style="margin-top:6px; align-items:center">
   584:         <input id="doc-search" type="search" placeholder="Search by name, id, or data..." />
   585:         <button id="doc-clear" class="secondary" style="display:none">Clear</button>
   586:         <div id="doc-meta" style="margin-left:auto; color:var(--muted); font-size:12px"></div>
   587:       </div>
   588:       <ul id="docs"></ul>
   589:     </section>`;
   590:   if(!state.docs.length) state.docs = await api.listDocs();
   591:   const input = document.getElementById('doc-search');
   592:   if(input){
   593:     input.value = state.docsQuery || '';
   594:     input.addEventListener('input', ()=>{ state.docsQuery = input.value; renderDocs(); });
   595:   }
   596:   const clearBtn = document.getElementById('doc-clear');
   597:   if(clearBtn){
   598:     clearBtn.onclick = ()=>{ state.docsQuery=''; if(input) input.value=''; renderDocs(); };
   599:   }
   600:   renderDocs();
   601: }
   602: function renderDocs(){
   603:   const ul=$('#docs'); if(!ul) return; ul.innerHTML='';
   604:   const meta = document.getElementById('doc-meta');
   605:   const q = (state.docsQuery||'').trim().toLowerCase();
   606:   let docs = state.docs.slice().reverse();
   607:   if(q){
   608:     const includes = (s)=> (s||'').toString().toLowerCase().includes(q);
   609:     docs = docs.filter(d=>{
   610:       const idStr = (d.id||'').toString();
   611:       const fname = d.fileName || '';
   612:       let dataVals = '';
   613:       try{
   614:         if(d.data && typeof d.data === 'object'){
   615:           dataVals = Object.values(d.data).filter(v=>v!=null).join(' ');
   616:         }
   617:       }catch{}
   618:       return includes(idStr) || includes(fname) || includes(dataVals);
   619:     });
   620:   }
   621:   const total = docs.length;
   622:   docs = docs.slice(0,20);
   623:   const clearBtn = document.getElementById('doc-clear');
   624:   if(clearBtn) clearBtn.style.display = q ? '' : 'none';
   625:   if(meta){
   626:     const showing = docs.length;
   627:     meta.textContent = `${showing}/${total} shown${q?` for "${state.docsQuery}"`:''}`;
   628:   }
   629:   if(docs.length===0){
   630:     const li=document.createElement('li');
   631:     li.textContent = q ? 'No matching letters' : 'No letters yet';
   632:     ul.appendChild(li);
   633:     return;
   634:   }
   635:   docs.forEach(d=>{
   636:     const li=document.createElement('li');
   637:     const a=document.createElement('a');
   638:     const label = d.fileName || `Doc ${d.id}`;
   639:     a.textContent = label;
   640:     a.href = (API_BASE || '') + (d.fileName ? `/api/documents/${d.id}/download-pdf` : `/api/documents/${d.id}/download`);
   641:     a.target='_blank';
   642:     li.appendChild(a);
   643:     ul.appendChild(li);
   644:   });
   645: }
   646: 
   647: // Home view
   648: async function viewHome(){
   649:   const count = state.templates.length;
   650:   const isAdmin = state.user?.role === 'admin';
   651:   const adminTile = isAdmin ? `
   652:     <div class="tile">
   653:       <h3 style="margin-top:0">Quick Add User (Admin)</h3>
   654:       <div class="row" style="gap:6px"><input id="qu-username" placeholder="Username" /><input id="qu-name" placeholder="Name" /></div>
   655:       <div class="row" style="gap:6px;margin-top:6px"><select id="qu-role"><option>editor</option><option>viewer</option><option>admin</option></select><input id="qu-pass" type="password" placeholder="Password" /><button id="qu-create">Add</button></div>
   656:       <small style="color:var(--muted)">Full user management is under Users.</small>
   657:     </div>` : '';
   658: 
   659:   const home = `
   660:   <section class="center container">
   661:     <h2>Home</h2>
   662:     <p style="color:var(--muted)">Start by choosing a template to create a letter, or manage your templates.</p>
   663:     <div class="tile-grid" style="margin-top:8px">
   664:       <div class="tile" id="tile-templates">
   665:         <h3 style="margin-top:0">Templates</h3>
   666:         <p style="color:var(--muted)">${count} available</p>
   667:         <div class="row" style="gap:8px"><button id="go-templates" class="secondary">Manage</button><button id="qc-create" class="success">Quick Create</button></div>
   668:         <div class="row" style="gap:6px;margin-top:6px"><input id="qc-name" placeholder="Template name" /></div>
   669:       </div>
   670:       <div class="tile">
   671:         <h3 style="margin-top:0">Letters</h3>
   672:         <p style="color:var(--muted)">Review and download previous letters</p>
   673:         <button id="go-letters" class="secondary">Open Letters</button>
   674:       </div>
   675:       ${adminTile}
   676:     </div>
   677:   </section>`;
   678:   app.innerHTML = home;
   679:   document.getElementById('go-templates').onclick = ()=> navigate('#/templates');
   680:   document.getElementById('go-letters').onclick = ()=> navigate('#/letters');
   681:   document.getElementById('qc-create').onclick = async ()=>{
   682:     const name = document.getElementById('qc-name').value.trim(); if(!name) return;
   683:     const created = await api.createTemplate({ name, description:'', content:'Hello {{name}}' });
   684:     state.templates.push(created); state.currentId = created.id; navigate('#/templates');
   685:   };
   686:   // For viewers, disable Quick Create (still allow Manage to view Templates)
   687:   if(state.user?.role === 'viewer'){
   688:     const qcBtn = document.getElementById('qc-create');
   689:     const qcName = document.getElementById('qc-name');
   690:     if(qcBtn) qcBtn.classList.add('hidden');
   691:     if(qcName) qcName.disabled = true;
   692:   }
   693:   if(isAdmin){
   694:     const quCreate = document.getElementById('qu-create');
   695:     if(quCreate){
   696:       quCreate.onclick = async ()=>{
   697:         const username = document.getElementById('qu-username').value.trim();
   698:         const name = document.getElementById('qu-name').value.trim();
   699:         const role = document.getElementById('qu-role').value;
   700:         const password = document.getElementById('qu-pass').value;
   701:         if(!username || !password) return alert('Username and password required');
   702:         try{
   703:           const created = await api.createUser({ username, name, role, password });
   704:           // Refresh users cache so Admin > Users lists the new account
   705:           try { state.users = await api.listUsers(); } catch {}
   706:           state.selectedUserId = created?.id || null;
   707:           alert('User created');
   708:           // Clear quick-add inputs
   709:           document.getElementById('qu-username').value = '';
   710:           document.getElementById('qu-name').value = '';
   711:           document.getElementById('qu-pass').value = '';
   712:         }catch(e){ alert(e.message); }
   713:       };
   714:     }
   715:   }
   716: }
   717: 
   718: // Profile view
   719: async function viewProfile(){
   720:   const u = state.user || {};
   721:   const initial = (u.name || u.username || '?').toString().charAt(0).toUpperCase();
   722:   const joined = u.createdAt ? new Date(u.createdAt).toLocaleDateString() : '-';
   723:   const updated = u.updatedAt ? new Date(u.updatedAt).toLocaleDateString() : '-';
   724:   app.innerHTML = `
   725:   <section class="center container profile-card">
   726:     <div class="profile-header">
   727:       <div class="avatar xl">${initial}</div>
   728:       <div class="meta">
   729:         <div class="name">${u.name || u.username || ''}</div>
   730:         <div class="username">@${u.username || ''}</div>
   731:         <span class="badge ${u.role}">${u.role || ''}</span>
   732:       </div>
   733:     </div>
   734:     <div class="profile-grid">
   735:       <div class="item"><label>Username</label><div class="value">${u.username || ''}</div></div>
   736:       <div class="item"><label>Role</label><div class="value">${u.role || ''}</div></div>
   737:       <div class="item"><label>Name</label><div class="value">${u.name || '—'}</div></div>
   738:       <div class="item"><label>Joined</label><div class="value">${joined}</div></div>
   739:       <div class="item"><label>Last Updated</label><div class="value">${updated}</div></div>
   740:     </div>
   741:   </section>`;
   742: }
   743: 
   744: async function viewAdminUsers(){
   745:   app.innerHTML = `
   746:   <section>
   747:     <div class="row" style="justify-content:space-between; align-items:center">
   748:       <h2 style="margin:0">Admin: Users</h2>
   749:       <div class="row" style="gap:6px">
   750:         <input id="user-search" placeholder="Search users" style="max-width:220px" />
   751:         <button id="user-add-btn" class="success">Add User</button>
   752:       </div>
   753:     </div>
   754:     <div class="users-grid" style="margin-top:8px">
   755:       <div>
   756:         <div id="users-list" class="user-list"></div>
   757:       </div>
   758:       <div>
   759:         <div id="user-detail" class="user-detail"></div>
   760:       </div>
   761:     </div>
   762:   </section>`;
   763:   state.users = await api.listUsers();
   764:   if(!state.selectedUserId && state.users.length){ state.selectedUserId = state.users[0].id; }
   765:   renderUserList();
   766:   renderUserDetail();
   767:   const s = document.getElementById('user-search');
   768:   if(s) s.addEventListener('input', ()=> renderUserList());
   769:   const addBtn = document.getElementById('user-add-btn');
   770:   if(addBtn) addBtn.addEventListener('click', ()=>{ state.creatingUser = true; state.selectedUserId = null; renderUserList(); renderUserDetail(); });
   771: }
   772: function renderUserList(){
   773:   const container = document.getElementById('users-list'); if(!container) return; container.innerHTML='';
   774:   const q = (document.getElementById('user-search')?.value || '').toLowerCase();
   775:   const items = state.users.filter(u=> !q || (u.username||'').toLowerCase().includes(q) || (u.name||'').toLowerCase().includes(q));
   776:   if(!items.length){ container.innerHTML = '<p style="color:var(--muted)">No users found.</p>'; return; }
   777:   items.forEach(u=>{
   778:     const card = document.createElement('button');
   779:     card.type = 'button';
   780:     const selected = u.id===state.selectedUserId && !state.creatingUser;
   781:     card.className = 'user-card' + (selected ? ' selected' : '');
   782:     const initial = (u.name||u.username||'?').charAt(0).toUpperCase();
   783:     card.innerHTML = `
   784:       <div class="avatar">${initial}</div>
   785:       <div class="meta">
   786:         <div class="name">${u.name||u.username}</div>
   787:         <div class="username">@${u.username}</div>
   788:         <span class="badge ${u.role}">${u.role}</span>
   789:       </div>`;
   790:     card.onclick = ()=>{ state.creatingUser = false; state.selectedUserId = u.id; renderUserList(); renderUserDetail(); };
   791:     container.appendChild(card);
   792:   });
   793: }
   794: function renderUserDetail(){
   795:   const panel = document.getElementById('user-detail'); if(!panel) return;
   796:   if(state.creatingUser || !state.selectedUserId){
   797:     panel.innerHTML = `
   798:       <h3 style="margin-top:0">Create User</h3>
   799:       <div class="row" style="margin-top:6px"><label style="width:30%">Username</label><input id="cu-username" placeholder="Username" /></div>
   800:       <div class="row" style="margin-top:6px"><label style="width:30%">Name</label><input id="cu-name" placeholder="Full name (optional)" /></div>
   801:       <div class="row" style="margin-top:6px"><label style="width:30%">Role</label><select id="cu-role"><option value="editor">editor</option><option value="viewer">viewer</option><option value="admin">admin</option></select></div>
   802:       <div class="row" style="margin-top:6px"><label style="width:30%">Password</label><input id="cu-pass" type="password" placeholder="Password" /></div>
   803:       <div class="user-actions" style="margin-top:12px">
   804:         <button id="cu-create" class="success">Create User</button>
   805:         <button id="cu-cancel" class="secondary">Cancel</button>
   806:       </div>
   807:     `;
   808:     const createBtn = document.getElementById('cu-create');
   809:     const cancelBtn = document.getElementById('cu-cancel');
   810:     if(createBtn) createBtn.onclick = async ()=>{
   811:       const username = document.getElementById('cu-username').value.trim();
   812:       const name = document.getElementById('cu-name').value.trim();
   813:       const role = document.getElementById('cu-role').value;
   814:       const password = document.getElementById('cu-pass').value;
   815:       if(!username || !password) return alert('Username and password required');
   816:       try{
   817:         const created = await api.createUser({ username, name, role, password });
   818:         // Update local cache and select the new user
   819:         try { state.users = await api.listUsers(); } catch { state.users.push(created); }
   820:         state.selectedUserId = created?.id || null;
   821:         state.creatingUser = false;
   822:         renderUserList(); renderUserDetail();
   823:         alert('User created');
   824:       }catch(e){ alert(e.message); }
   825:     };
   826:     if(cancelBtn) cancelBtn.onclick = ()=>{ state.creatingUser = false; if(!state.selectedUserId && state.users[0]) state.selectedUserId = state.users[0].id; renderUserList(); renderUserDetail(); };
   827:     return;
   828:   }
   829:   const u = state.users.find(x=>x.id===state.selectedUserId);
   830:   if(!u){ panel.innerHTML = '<p style="color:var(--muted)">Select a user to manage.</p>'; return; }
   831:   panel.innerHTML = `
   832:     <div class="user-header">
   833:       <div class="avatar lg">${(u.name||u.username||'?').charAt(0).toUpperCase()}</div>
   834:       <div class="meta">
   835:         <div class="name">${u.name||u.username}</div>
   836:         <div class="username">@${u.username}</div>
   837:       </div>
   838:     </div>
   839:     <div class="row" style="margin-top:12px">
   840:       <label style="width:30%">Name</label>
   841:       <input id="ud-name" value="${u.name||''}" placeholder="Name" />
   842:     </div>
   843:     <div class="row" style="margin-top:6px">
   844:       <label style="width:30%">Role</label>
   845:       <select id="ud-role"><option value="admin">admin</option><option value="editor">editor</option><option value="viewer">viewer</option></select>
   846:     </div>
   847:     <div class="user-actions" style="margin-top:12px">
   848:       <button id="ud-save" class="success">Save Changes</button>
   849:       <button id="ud-reset">Reset Password</button>
   850:       <button id="ud-delete" class="danger">Delete Account</button>
   851:     </div>
   852:   `;
   853:   const roleSel = document.getElementById('ud-role'); if(roleSel) roleSel.value = u.role;
   854:   const save = document.getElementById('ud-save');
   855:   const reset = document.getElementById('ud-reset');
   856:   const del = document.getElementById('ud-delete');
   857:   if(save) save.onclick = async ()=>{
   858:     try{
   859:       const body = { name: document.getElementById('ud-name').value, role: document.getElementById('ud-role').value };
   860:       const updated = await api.updateUser(u.id, body);
   861:       const idx = state.users.findIndex(x=>x.id===u.id); if(idx>-1) state.users[idx]=updated;
   862:       renderUserList(); renderUserDetail();
   863:       alert('User updated');
   864:     }catch(e){ alert(e.message); }
   865:   };
   866:   if(reset) reset.onclick = async ()=>{
   867:     const pwd = prompt(`Set a new password for ${u.username}`);
   868:     if(pwd==null) return;
   869:     const p = pwd.trim(); if(!p) return alert('Password required');
   870:     try{
   871:       await api.updateUser(u.id, { password: p });
   872:       alert('Password reset');
   873:     }catch(e){ alert(e.message); }
   874:   };
   875:   if(del) del.onclick = async ()=>{
   876:     if(!confirm(`Delete user ${u.username}?`)) return;
   877:     try{
   878:       await api.deleteUser(u.id);
   879:       state.users = state.users.filter(x=>x.id!==u.id);
   880:       state.selectedUserId = state.users[0]?.id || null;
   881:       renderUserList(); renderUserDetail();
   882:     }catch(e){ alert(e.message); }
   883:   };
   884: }
   885: 
   886: // Register routes
   887: addRoute('#/login', viewLogin, { title:'Login' });
   888: addRoute('#/home', async ()=>{ await viewHome(); }, { auth:true, title:'Home' });
   889: addRoute('#/templates', viewTemplates, { auth:true, title:'Templates' });
   890: addRoute('#/compose', viewCompose, { auth:true, roles:['admin','editor'], title:'Compose' });
   891: addRoute('#/letters', viewDocuments, { auth:true, title:'Letters' });
   892: addRoute('#/profile', async ()=>{ await viewProfile(); }, { auth:true, title:'Profile' });
   893: addRoute('#/admin/users', viewAdminUsers, { auth:true, roles:['admin'], title:'Users' });
   894: addRoute('#/not-found', async()=>{ app.innerHTML='<section><h2>Not found</h2></section>'; });
   895: 
   896: // Boot
   897: async function bootstrapData(){
   898:   if(!state.user) return;
   899:   state.templates = await api.listTemplates();
   900:   state.docs = await api.listDocs();
   901: }
   902: 
   903: $('#logout-btn').addEventListener('click', async ()=>{
   904:   await api.logout();
   905:   setUser(null);
   906:   const overlay = document.getElementById('login');
   907:   if(overlay) overlay.style.display = 'grid'; // show login overlay again
   908:   navigate('#/login');
   909: });
   910: 
   911: $('#burger').addEventListener('click', ()=>{
   912:   const d=document.getElementById('drawer');
   913:   const hidden=d.classList.toggle('hidden');
   914:   if(hidden){ document.body.classList.remove('nav-open'); }
   915:   else { document.body.classList.add('nav-open'); }
   916: });
   917: 
   918: document.querySelectorAll('[data-route]').forEach(a=>a.addEventListener('click', ()=>{
   919:   if(window.innerWidth<900){
   920:     document.getElementById('drawer').classList.add('hidden');
   921:     document.body.classList.remove('nav-open');
   922:   }
   923: }));
   924: 
   925: (async function init(){
   926:   const me = await api.me();
   927:   setUser(me.user);
   928:   state.authReady = true; // mark auth check complete
   929: 
   930:   // Bind overlay form
   931:   bindOverlayLogin();
   932: 
   933:   // Hide overlay if already authed
   934:   if(state.user) hideLoginOverlay();
   935: 
   936:   if(state.user){
   937:     await bootstrapData();
   938:     if(!location.hash || location.hash==='#/login') navigate('#/home');
   939:   } else {
   940:     // Show overlay only when unauthenticated, keep current hash (no bounce)
   941:     showLoginOverlay();
   942:   }
   943:   handleRoute();
   944: 
   945:   // Initial responsive apply
   946:   applyResponsiveNav();
   947: })();
